 @tailwind base;
@tailwind components;
@tailwind utilities;

body{
    background-image: url(components/f989258793a54fc7a9647d892594611c.webp);
    background-size: cover;
}

/*
import React, { useEffect, useState } from 'react';

export default function WeatherAPI() {
    const [city, setCity] = useState("London");
    const [weatherData, setWeatherData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const fetchWeatherData = async (city) => {
        setLoading(true);
        setError(null);
        try {
            
            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=3755b57f85e253d44c59b1c8565c0e4f&units=metric`;
            const response = await fetch(url);
            if (!response.ok) throw new Error('City not found');
            const data = await response.json();
            setWeatherData(data);
        } catch (error) {
            setError(error.message);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchWeatherData(city);
    }, [city]);

    const handleSearch = () => {
        fetchWeatherData(city);
    };

    return (
        <div className="flex flex-col justify-center items-center h-screen gap-8">
            <div className="w-[300px] aspect-video rounded-lg shadow flex flex-col items-center justify-center gap-2 bg-slate-50 group">
                <div className="flex flex-col items-center p-8 rounded-md w-full sm:px-12 bg-gray-900 text-gray-100">
                    {loading && <p className="text-gray-400">Loading...</p>}
                    {error && <p className="text-red-400">{error}</p>}
                    {weatherData && !loading && !error && (
                        <>
                            <div className="text-center">
                                <h2 className="text-xl font-semibold">{weatherData.name}</h2>
                                <p className="text-sm text-gray-400">{new Date().toLocaleDateString()}</p>
                            </div>
                            <svg className="w-32 h-32 p-6 text-yellow-400 fill-current animate-spin" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                                <path d="M256,104c-83.813,0-152,68.187-152,152s68.187,152,152,152,152-68.187,152-152S339.813,104,256,104Zm0,272A120,120,0,1,1,376,256,120.136,120.136,0,0,1,256,376Z"></path>
                                <rect className="animate-pulse" y="16" x="240" height="48" width="32"></rect>
                                <rect className="animate-pulse delay-200" y="448" x="240" height="48" width="32"></rect>
                                <rect className="animate-pulse" y="240" x="448" height="32" width="48"></rect>
                                <rect className="animate-pulse delay-200" y="240" x="16" height="32" width="48"></rect>
                                <rect className="animate-pulse" transform="rotate(-45 416 416)" y="393.373" x="400" height="45.255" width="32"></rect>
                                <rect className="animate-pulse delay-200" transform="rotate(-45 96 96)" y="73.373" x="80" height="45.255" width="32.001"></rect>
                                <rect className="animate-pulse" transform="rotate(-45.001 96.002 416.003)" y="400" x="73.373" height="32" width="45.255"></rect>
                                <rect className="animate-pulse delay-200" transform="rotate(-45 416 96)" y="80" x="393.373" height="32.001" width="45.255"></rect>
                            </svg>
                            <div className="mb-2 text-2 xl font-semibold">
                                {weatherData.main.temp}° <span className="mx-1 font-normal">/</span> {weatherData.main.temp_min}°
                            </div>
                            <p className="text-gray-400">{weatherData.weather[0].description}</p>
                        </>
                    )}
                </div>
            </div>

            <div className="flex items-center justify-center p-5">
                <div className="rounded-lg bg-gray-200 p-5">
                    <div className="flex">
                        <div className="flex w-10 items-center justify-center rounded-tl-lg rounded-bl-lg border-r border-gray-200 bg-white p-5">
                            <svg viewBox="0 0 20 20" aria-hidden="true" className="pointer-events-none absolute w-5 fill-gray-500 transition">
                                <path d="M16.72 17.78a.75.75 0 1 0 1.06-1.06l-1.06 1.06ZM9 14.5A5.5 5.5 0 0 1 3.5 9H2a7 7 0 0 0 7 7v-1.5ZM3.5 9A5.5 5.5 0 0 1 9 3.5V2a7 7 0 0 0-7 7h1.5ZM9 3.5A5.5 5.5 0 0 1 14.5 9H16a7 7 0 0 0-7-7v1.5Zm3.89 10.45 3.83 3.83 1.06-1.06-3.83-3.83-1.06 1.06ZM14.5 9a5.48 5.48 0 0 1-1.61 3.89l1.06 1.06A6.98 6.98 0 0 0 16 9h-1.5Zm-1.61 3.89A5.48 5.48 0 0 1 9 14.5V16a6.98 6.98 0 0 0 4.95-2.05l-1.06-1.06Z"></path>
                            </svg>
                        </div>
                        <input
                            type="text"
                            className="w-full max-w-[160px] bg-white pl-2 text-base font-semibold outline-0"
                            placeholder="Enter city"
                            value={city}
                            onChange={(e) => setCity(e.target.value)}
                        />
                        <input
                            type="button"
                            value="Search"
                            className="bg-blue-500 p-2 rounded-tr-lg rounded-br-lg text-white font-semibold cursor-pointer hover:bg-blue-800 transition-colors"
                            onClick={handleSearch}
                        />
                    </div>
                </div>
            </div>
        </div>
    );
} */
